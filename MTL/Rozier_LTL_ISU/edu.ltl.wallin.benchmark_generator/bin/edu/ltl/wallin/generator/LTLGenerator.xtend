/*
 * generated by Xtext 2.14.0
 */
package edu.ltl.wallin.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import edu.ltl.wallin.output.SAT_Output
import edu.ltl.wallin.lTL.Formula
import java.io.BufferedWriter
import java.io.FileWriter
import java.io.File

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class LTLGenerator extends AbstractGenerator {

	static var modified_output_filename = "";

	def static void log(String output, BufferedWriter writer){
			if(writer !== null) writer.append(output + "\n");
	}

	def static void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context, int trace_length, boolean verbose, String output_filename) {
		val curTime =  System.currentTimeMillis();
		var  modified_output_filename = "./OUTPUT/" + output_filename + "_" + curTime + "/";
		new File(modified_output_filename).mkdirs();
		modified_output_filename += output_filename + "_" + curTime;
		var log_writer = try{
			new BufferedWriter(new FileWriter(modified_output_filename + "_log.txt"))
			}catch(Exception ex){
				null;
			}
		
		log("STARTING FORMULA\n\n" + PerformTransforms.debugPrettyPrinter(resource.getContents().get(0) as Formula) + "\n", log_writer);
		ComputeDeadlines.transformFormula(resource, trace_length, verbose, output_filename);
		val var_set = ComputeDeadlines.numVars(resource.getContents().get(0) as Formula);
		val sat_query = SAT_Output.writeForSMT(resource.getContents().get(0) as Formula, modified_output_filename, trace_length);
		log("GENERATED SAT QUERY\n\n" + sat_query + "\n", log_writer);
		val sat_result = SAT_Output.callGetZ3(modified_output_filename + ".smt");
		log("SAT SOLVER RESULT\n\n" + sat_result + "\n", log_writer);
		val trace = SAT_Output.processSMTResponse(sat_result, modified_output_filename, var_set, trace_length);
		log("GENERATED TRACE\n\n" + trace + "\n", log_writer);
		log_writer.close();
	}
	
	override doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		doGenerate(input, fsa, context, 10, true, "BC_OUTPUT");
	}
	
}
