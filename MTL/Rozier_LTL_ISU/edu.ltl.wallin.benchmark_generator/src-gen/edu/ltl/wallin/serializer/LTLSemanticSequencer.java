/*
 * generated by Xtext 2.14.0
 */
package edu.ltl.wallin.serializer;

import com.google.inject.Inject;
import edu.ltl.wallin.lTL.BinaryExpr;
import edu.ltl.wallin.lTL.IdFormula;
import edu.ltl.wallin.lTL.LTLPackage;
import edu.ltl.wallin.lTL.UnaryExpr;
import edu.ltl.wallin.services.LTLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class LTLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LTLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LTLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LTLPackage.BINARY_EXPR:
				sequence_ConnectiveFormula_UntilFormula(context, (BinaryExpr) semanticObject); 
				return; 
			case LTLPackage.ID_FORMULA:
				sequence_Literal(context, (IdFormula) semanticObject); 
				return; 
			case LTLPackage.UNARY_EXPR:
				sequence_UnaryExpr(context, (UnaryExpr) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Formula returns BinaryExpr
	 *     UntilFormula returns BinaryExpr
	 *     UntilFormula.BinaryExpr_1_0_0_0 returns BinaryExpr
	 *     ConnectiveFormula returns BinaryExpr
	 *     ConnectiveFormula.BinaryExpr_1_0_0_0 returns BinaryExpr
	 *     UnaryExpr returns BinaryExpr
	 *     Literal returns BinaryExpr
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             left=UntilFormula_BinaryExpr_1_0_0_0 
	 *             op='U' 
	 *             lowerBound=INT? 
	 *             end?='end'? 
	 *             upperBound=INT? 
	 *             right=ConnectiveFormula
	 *         ) | 
	 *         (left=ConnectiveFormula_BinaryExpr_1_0_0_0 (op='&' | op='|') right=UnaryExpr)
	 *     )
	 */
	protected void sequence_ConnectiveFormula_UntilFormula(ISerializationContext context, BinaryExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Formula returns IdFormula
	 *     UntilFormula returns IdFormula
	 *     UntilFormula.BinaryExpr_1_0_0_0 returns IdFormula
	 *     ConnectiveFormula returns IdFormula
	 *     ConnectiveFormula.BinaryExpr_1_0_0_0 returns IdFormula
	 *     UnaryExpr returns IdFormula
	 *     Literal returns IdFormula
	 *
	 * Constraint:
	 *     (varName=VAR_NAME lowerBound=INT? upperBound=INT?)
	 */
	protected void sequence_Literal(ISerializationContext context, IdFormula semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Formula returns UnaryExpr
	 *     UntilFormula returns UnaryExpr
	 *     UntilFormula.BinaryExpr_1_0_0_0 returns UnaryExpr
	 *     ConnectiveFormula returns UnaryExpr
	 *     ConnectiveFormula.BinaryExpr_1_0_0_0 returns UnaryExpr
	 *     UnaryExpr returns UnaryExpr
	 *     Literal returns UnaryExpr
	 *
	 * Constraint:
	 *     (((op='F' | op='G') lowerBound=INT? end?='end'? upperBound=INT? expr=UnaryExpr) | (op='-' expr=UnaryExpr))
	 */
	protected void sequence_UnaryExpr(ISerializationContext context, UnaryExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
