/*
 * generated by Xtext 2.14.0
 */
package edu.ltl.wallin.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import edu.ltl.wallin.ide.contentassist.antlr.internal.InternalLTLParser;
import edu.ltl.wallin.services.LTLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class LTLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LTLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LTLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getConnectiveFormulaAccess().getOpAlternatives_1_0_0_1_0(), "rule__ConnectiveFormula__OpAlternatives_1_0_0_1_0");
			builder.put(grammarAccess.getUnaryExprAccess().getAlternatives(), "rule__UnaryExpr__Alternatives");
			builder.put(grammarAccess.getUnaryExprAccess().getOpAlternatives_0_1_0(), "rule__UnaryExpr__OpAlternatives_0_1_0");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getUntilFormulaAccess().getGroup(), "rule__UntilFormula__Group__0");
			builder.put(grammarAccess.getUntilFormulaAccess().getGroup_1(), "rule__UntilFormula__Group_1__0");
			builder.put(grammarAccess.getUntilFormulaAccess().getGroup_1_0(), "rule__UntilFormula__Group_1_0__0");
			builder.put(grammarAccess.getUntilFormulaAccess().getGroup_1_0_0(), "rule__UntilFormula__Group_1_0_0__0");
			builder.put(grammarAccess.getConnectiveFormulaAccess().getGroup(), "rule__ConnectiveFormula__Group__0");
			builder.put(grammarAccess.getConnectiveFormulaAccess().getGroup_1(), "rule__ConnectiveFormula__Group_1__0");
			builder.put(grammarAccess.getConnectiveFormulaAccess().getGroup_1_0(), "rule__ConnectiveFormula__Group_1_0__0");
			builder.put(grammarAccess.getConnectiveFormulaAccess().getGroup_1_0_0(), "rule__ConnectiveFormula__Group_1_0_0__0");
			builder.put(grammarAccess.getUnaryExprAccess().getGroup_0(), "rule__UnaryExpr__Group_0__0");
			builder.put(grammarAccess.getUnaryExprAccess().getGroup_1(), "rule__UnaryExpr__Group_1__0");
			builder.put(grammarAccess.getLiteralAccess().getGroup_0(), "rule__Literal__Group_0__0");
			builder.put(grammarAccess.getLiteralAccess().getGroup_0_2(), "rule__Literal__Group_0_2__0");
			builder.put(grammarAccess.getLiteralAccess().getGroup_0_3(), "rule__Literal__Group_0_3__0");
			builder.put(grammarAccess.getLiteralAccess().getGroup_1(), "rule__Literal__Group_1__0");
			builder.put(grammarAccess.getUntilFormulaAccess().getOpAssignment_1_0_0_1(), "rule__UntilFormula__OpAssignment_1_0_0_1");
			builder.put(grammarAccess.getUntilFormulaAccess().getLowerBoundAssignment_1_0_0_3(), "rule__UntilFormula__LowerBoundAssignment_1_0_0_3");
			builder.put(grammarAccess.getUntilFormulaAccess().getEndAssignment_1_0_0_5(), "rule__UntilFormula__EndAssignment_1_0_0_5");
			builder.put(grammarAccess.getUntilFormulaAccess().getUpperBoundAssignment_1_0_0_6(), "rule__UntilFormula__UpperBoundAssignment_1_0_0_6");
			builder.put(grammarAccess.getUntilFormulaAccess().getRightAssignment_1_1(), "rule__UntilFormula__RightAssignment_1_1");
			builder.put(grammarAccess.getConnectiveFormulaAccess().getOpAssignment_1_0_0_1(), "rule__ConnectiveFormula__OpAssignment_1_0_0_1");
			builder.put(grammarAccess.getConnectiveFormulaAccess().getRightAssignment_1_1(), "rule__ConnectiveFormula__RightAssignment_1_1");
			builder.put(grammarAccess.getUnaryExprAccess().getOpAssignment_0_1(), "rule__UnaryExpr__OpAssignment_0_1");
			builder.put(grammarAccess.getUnaryExprAccess().getLowerBoundAssignment_0_3(), "rule__UnaryExpr__LowerBoundAssignment_0_3");
			builder.put(grammarAccess.getUnaryExprAccess().getEndAssignment_0_5(), "rule__UnaryExpr__EndAssignment_0_5");
			builder.put(grammarAccess.getUnaryExprAccess().getUpperBoundAssignment_0_6(), "rule__UnaryExpr__UpperBoundAssignment_0_6");
			builder.put(grammarAccess.getUnaryExprAccess().getExprAssignment_0_8(), "rule__UnaryExpr__ExprAssignment_0_8");
			builder.put(grammarAccess.getUnaryExprAccess().getOpAssignment_1_1(), "rule__UnaryExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getUnaryExprAccess().getExprAssignment_1_2(), "rule__UnaryExpr__ExprAssignment_1_2");
			builder.put(grammarAccess.getLiteralAccess().getVarNameAssignment_0_1(), "rule__Literal__VarNameAssignment_0_1");
			builder.put(grammarAccess.getLiteralAccess().getLowerBoundAssignment_0_2_1(), "rule__Literal__LowerBoundAssignment_0_2_1");
			builder.put(grammarAccess.getLiteralAccess().getUpperBoundAssignment_0_3_1(), "rule__Literal__UpperBoundAssignment_0_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LTLGrammarAccess grammarAccess;

	@Override
	protected InternalLTLParser createParser() {
		InternalLTLParser result = new InternalLTLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LTLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LTLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
