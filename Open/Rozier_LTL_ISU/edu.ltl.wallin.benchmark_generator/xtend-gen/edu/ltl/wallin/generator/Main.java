/**
 * generated by Xtext 2.14.0
 */
package edu.ltl.wallin.generator;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;
import edu.ltl.wallin.LTLStandaloneSetup;
import edu.ltl.wallin.generator.LTLGenerator;
import java.util.List;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class Main {
  public static void main(final String[] args) {
    boolean verbose = false;
    String output_filename = "BC_OUTPUT";
    boolean _isEmpty = ((List<String>)Conversions.doWrapArray(args)).isEmpty();
    if (_isEmpty) {
      System.err.println("Aborting: no formula provided!");
      return;
    } else {
      int _length = args.length;
      boolean _lessThan = (_length < 2);
      if (_lessThan) {
        System.err.println("Aborting: trace length or formula missing!");
        return;
      }
    }
    int i = 0;
    for (i = 0; (i < args.length); i++) {
      {
        boolean _equals = args[i].equals("-v");
        if (_equals) {
          verbose = true;
        }
        boolean _equals_1 = args[i].equals("-o");
        if (_equals_1) {
          output_filename = args[(i + 1)];
        }
      }
    }
    final Injector injector = new LTLStandaloneSetup().createInjectorAndDoEMFRegistration();
    final Main main = injector.<Main>getInstance(Main.class);
    main.runGenerator(args[0], Integer.parseInt(args[1]), verbose, output_filename);
  }
  
  @Inject
  private Provider<ResourceSet> resourceSetProvider;
  
  @Inject
  private IResourceValidator validator;
  
  @Inject
  private GeneratorDelegate generator;
  
  @Inject
  private JavaIoFileSystemAccess fileAccess;
  
  protected void runGenerator(final String string, final int trace_length, final boolean verbose, final String output_filename) {
    final ResourceSet set = this.resourceSetProvider.get();
    final Resource resource = set.getResource(URI.createFileURI(string), true);
    this.fileAccess.setOutputPath("src-gen/");
    GeneratorContext _generatorContext = new GeneratorContext();
    final Procedure1<GeneratorContext> _function = (GeneratorContext it) -> {
      it.setCancelIndicator(CancelIndicator.NullImpl);
    };
    final GeneratorContext context = ObjectExtensions.<GeneratorContext>operator_doubleArrow(_generatorContext, _function);
    LTLGenerator.doGenerate(resource, this.fileAccess, context, trace_length, verbose, output_filename);
    if (verbose) {
      System.out.println("Code generation finished.");
    }
  }
}
